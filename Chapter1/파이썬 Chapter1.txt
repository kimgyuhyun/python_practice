Chapter 1 part 1
프로그래밍을 배우는 목적은 컴퓨터가 우리를 위해 일 하도록 만드는 것
우리들이  프로그램을 가르치는것이  우리 세계에서 동작하는 방법을 기계에게 가르치는것보다 쉽기때문
사용자 입장에서 벗어나 직접 새로운 것을 만들어 보는것
파이썬은 데이터 마이닝, 분석 등을 위한 좋은 프로그래밍 언어
문제를 해결할 수 있는 프로그램을 짜는 것

Chapter 1 part 2
라즈베리 파이는 '단일 보드 컴퓨터'이고 이런 것들은 점점 작아진다 구조는 같지만 부품 개수가 줄어들고 있다는 뜻이다.
입력장치는 키보드, 마우스, 터치 스크린등이 있고
출력장치는 화면, 스피커, 프린터, DVD 기록기 등이 있다
컴퓨터에서 뇌와 가장 비슷한 기능을 하는것은 마이크로 프로세서이고 중앙연산처리장치(CPU)라고도 한다
CPU는 1초에 32개나 64개의 작은 핀들을 통해 1초에 30억번 명령을 보낸다다 그리고 이 명령은
메인 메모리에 저장되어있고, 메모리는 아주 빠르다 CPU가 새로운 명령이 필요하면 메인 메모리에게
명령이 어디에 있는지 물어보고 메인 메모리에게 전달받은 명령을 실행한다
메인 메모리는 매우 빠르지만 전원을 끄면 정보가 사라지는 휘발성 메모리다
만약 워드 파일이나 텍스트 파일을 저장해둘려면 사라지지않는곳에 저장해야둬야 하는데 그 역할을 하는것이
바로 보조기억장치인 하드 드라이브 (HDD)이다
CPU는 별로 똑똑하지는 않지만 매우 빠르고 아주 잘 쓰여진 소프트웨어가 지능역할을 대신한다
메인 메모리는 빠르게 작동하며 프로그램을 저장
보조 기억장치는 영구적으로 데이터를 저장
메인 메모리가에 있는 사람이 본인이면 CPU가 다음에 뭐를 할지 질문할테니 대답을 해줘야 한다
파일에 파이썬 코드를 쓴다 쓴 코드는 메인 메모리에  로드된다
실제로는 쓴 코드가 바로 실행되지 않고 작성한 파이썬 파일은 CPU가 이해할 수 있는 언어인 기계어로 번역된 다음
로드되어 실행되는 것이다.

Chapter 1 part 3
파이썬이 최근에 인기가 많아진 이유는 배우기 쉽고 간결하고 강력하기 때문
syntax Errors: 문법 에러
x = 1: x라는 기억 저장소에 1을 집어넣으라는 뜻
print(x): x라는 기억 저장소에 저장된 값을 보여줘 라는 뜻
x=x+1:" 예전 x값에 1을 더해 x에 넣으라는 뜻
여기서 "="는 x를 가르키는 화살표와 같은것

Chapter 1 part 4
Reserved words(예약어): 지정한 의미로만 쓰이는 단어 지정한 의미가 아닌 다른 의미로는 쓸 수 없음
파이썬 예약어에는 and, del, if, pass, in이 있다
x = 2: 변수 x에 상수 2를 넣으라는 명령           x는 본인이 지정한 변수 이름
x = x + 2: x에 2를 더한 다음 결과값인 4를 x에 넣으라는 명령
print(x): x 에 있는 값을 출력하라는 뜻
print: 함수이자 예약어 이다
+, -: 연산자
CLI에서 코드를 한줄씩 실행하는 방법은  상호대화식(Interactive)입니다
코드가 길어질 경우에는 스크립트 방식(여러줄을 한번에 작성하는 방식)이 효과적입니다
그래서 우리는 스크립트 형태로 작성하고 이 파일을 보조 기억장치에 저장한 뒤 한번에 실행시켜 처리하게됩니다.

순차문: 코드가 처음 줄부터 차례대로 실행되는 경우입니다. 짧고 단조로운 코드만 짤 수 있습니다
x = 2: 변수x를 찾아 메모리 위치에 2를 넣으라는 뜻
print(x): x값을 출력하라는 뜻
x = x + 2: x를 찾아 2를 더한 값을 다시 x에 넣고
print(x):x에 있는 4를 출력하라는 뜻

조건문: 어떤 조건이 참일 경우에만 실행하도록 하는 것 우리는 여기서 예약어인 if를 사용 if 조건문이 참인 경우
들여쓰기가 되어 있는 코드 부분이 실행되게 됩니다
x = 5
if x < 10: x가 10보다 작다면
   print('Smaller'): smaller를 출력한다
들여쓰기가 없는 부분은 순서대로 실행된다.
if x > 20: x가 20보다 크다면
   print('Bigger'): Bigger를 출력한다
x는 5기 때문에 거짓임으로 이 부분을 건너뛰어 'Bigger'는 출력되지 않는다

반복문: 조건식이 참이면 코드가 반복적으로 실행되며 조건이 더 이상 성립하지 않으면 빠져나옵니다.
n = 5
while n > 0 : n이 0보다 큰지 참, 거짓 질문을 한다 참일 경우 밑에 2줄을 실행한다
     print(n): n을 출력한다
     n = n - 1: n을  4로 만듭니다
그 다음 다시 올라가서 조건을 확인합니다
while n > 0 : n이 0보다 큰지 참, 거짓을 질문 참일 경우 밑에 2줄을 실행
     print(n): n을 출력
     n = n - 1: n을 3으로 만듭니다
이 과정을 반복하다가 n이 0이 되면 더 이상 0보다 크지 않기 때문에 while 문을 빠져 나오게 됩니다




        

